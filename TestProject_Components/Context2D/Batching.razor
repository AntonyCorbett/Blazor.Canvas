@page "/2D/batching"
<h3>Batching</h3>

This API allows you to batch any non-read API, which tends to have a significant performance improvement:<br />
<code>
await using (var batch = await ctx.CreateBatchAsync())<br/>
{<br />
//await batch.AnyCallAsync();<br />
}<br />
</code><br />
Important: the execution of the call happens on dispose of the batch. That means, that if you omit the <code>await using</code>, then your batch won't be executed.
<hr />
<Canvas @ref="canvas" width="400" height="400" style="border: 5px solid red" />
<hr />
<ul id="Custom">
    <li>
        <label for="batch">Batch</label>
        <input id="batch" type="checkbox" @bind-value="@Batch" />
    </li>
</ul>

<ol>
    @if (Messages != null)
    {
        foreach (var message in Messages)
        {
            <li>@message</li>
        }
    }
</ol>

@using Microsoft.JSInterop 
@inject IJSRuntime js

@code {
    private Canvas canvas;
    private List<string> Messages = new List<string>();
    private bool Batch { get; set; }
    private bool[] last_render = new bool[] { true };
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var current_state = new bool[] { Batch };
        if (!current_state.SequenceEqual(last_render))
        {
            last_render = current_state;
            await UpdateCanvasAsync();
        }
        await base.OnAfterRenderAsync(firstRender);
    }
    private async Task UpdateCanvasAsync()
    {
        Messages.Clear();
        var start = DateTime.Now;
        await using (var ctx = await canvas.GetContext2DAsync())
        {
            if (Batch)
            {
                await using (var batch = await ctx.CreateBatchAsync())
                {
                    await ExecuteAsync(batch);
                }
            }
            else
            {
                await ExecuteAsync(ctx);
            }

        }
        var end = DateTime.Now;
        Messages.Add($"{(Batch ? "batch": "non-batch")} operation took: {(end - start).TotalMilliseconds}ms");
        Messages = Messages.ToList();
        await InvokeAsync(StateHasChanged);
    }
    private async Task ExecuteAsync(Excubo.Blazor.Canvas.Contexts.IContext2DWithoutGetters ctx)
    {
        await ctx.ClearRectAsync(0, 0, 400, 400);
        await ctx.SetTransformAsync(1, 0, 0, 1, 0, 0);
        await ctx.RestoreAsync();
        await ctx.SaveAsync();
        await ctx.SaveAsync();
        await ctx.FillTextAsync("Hello", 0, 100);
        await ctx.FillStyleAsync("green");
        await ctx.StrokeStyleAsync("green");
        await ctx.FontAsync("48px serif");
        await ctx.RestoreAsync();
        await ctx.FillTextAsync("canvas", 100, 40);
        await ctx.RestoreAsync();
        await ctx.ClearRectAsync(0, 0, 400, 400);
        await ctx.SetTransformAsync(1, 0, 0, 1, 0, 0);
        await ctx.RestoreAsync();
        await ctx.SaveAsync();
        await ctx.FillTextAsync("Hello", 0, 100);
        await ctx.FillTextAsync("canvas", 100, 10);
        await ctx.FillRectAsync(100, 100, 100, 100);
        await ctx.StrokeRectAsync(210, 100, 100, 100);
        await ctx.ClearRectAsync(0, 0, 400, 400);
        await ctx.SetTransformAsync(1, 0, 0, 1, 0, 0);
        await ctx.RestoreAsync();
        await ctx.SaveAsync();
        await ctx.FillTextAsync("Hello", 0, 100);
        await ctx.FillTextAsync("canvas", 100, 10);
        await ctx.ClearRectAsync(0, 0, 400, 400);
        await ctx.SetTransformAsync(1, 0, 0, 1, 0, 0);
        await ctx.RestoreAsync();
        await ctx.SaveAsync();
        await ctx.FillTextAsync("Hello", 0, 120);
        await ctx.FillStyleAsync(0, 0, 100, 100, (Offset: 0, Color: "green"), (Offset: 1, Color: "blue"));
        await ctx.FillTextAsync("canvas", 100, 10);
        await ctx.FillRectAsync(0, 0, 100, 100);
        await ctx.FillStyleAsync(250, 250, 10, 250, 250, 80, (Offset: 0, Color: "green"), (Offset: 0.5, Color: "red"), (Offset: 1, Color: "blue"));
        await ctx.FillRectAsync(200, 200, 100, 100);
        await ctx.ClearRectAsync(0, 0, 400, 400);
        await ctx.SetTransformAsync(1, 0, 0, 1, 0, 0);
        await ctx.RestoreAsync();
        await ctx.SaveAsync();
        await ctx.FillTextAsync("Hello", 0, 100);
        await ctx.FillTextAsync("canvas", 100, 10);
        await ctx.MoveToAsync(100, 100);
        await ctx.LineToAsync(100, 200);
        await ctx.LineToAsync(200, 200);
        await ctx.LineToAsync(200, 100);
        await ctx.StrokeAsync();
        await ctx.BeginPathAsync();
        await ctx.EllipseAsync(300, 200, 50, 20, 0, 0, 360);
        await ctx.StrokeAsync();
        await ctx.BeginPathAsync();
        await ctx.MoveToAsync(300, 50);
        await ctx.QuadraticCurveToAsync(300, 100, 350, 100);
        await ctx.StrokeAsync();
        await ctx.BeginPathAsync();
        await ctx.MoveToAsync(300, 250);
        await ctx.BezierCurveToAsync(300, 300, 350, 300, 400, 400);
        await ctx.StrokeAsync();
        await ctx.ClearRectAsync(0, 0, 400, 400);
        await ctx.SetTransformAsync(1, 0, 0, 1, 0, 0);
        await ctx.RestoreAsync();
        await ctx.SaveAsync();
        await ctx.FillTextAsync("Hello", 0, 100);
        await ctx.RotateAsync(45);
        await ctx.ScaleAsync(1.1, 1.1);
        await ctx.TranslateAsync(10, 10);
        await ctx.TransformAsync(1, 1, 10, 1, 2, 0);
        Excubo.Blazor.Canvas.Contexts.DOMMatrix matrix = null;
        try
        {
#pragma warning disable CS0618 // Type or member is obsolete
            await ctx.CurrentTransformAsync(matrix);
#pragma warning restore CS0618 // Type or member is obsolete
        }
        catch
        {
        }
        await ctx.FillTextAsync("canvas", 100, 10);
        await js.InvokeVoidAsync("eval", $"mypath = new Path2D(); mypath.rect(10, 10, 100, 100);");
        await ctx.StrokeAsync("mypath");
        await js.InvokeVoidAsync("eval", $"myelement = document.getElementById('Custom')");
        await ctx.DrawFocusIfNeededAsync("myelement");
        await ctx.ClearRectAsync(0, 0, 400, 400);
        await ctx.ResetTransformAsync();
        await ctx.FillStyleAsync(Batch ? "green" : "red");
        await ctx.StrokeStyleAsync(Batch ? "green" : "red");
        await ctx.FontAsync("30px serif");
        await ctx.FillTextAsync("Batch performance is superior", 0, 50);

    }
}
